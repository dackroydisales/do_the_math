{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 HelveticaNeue-Italic;\f4\fnil\fcharset0 HelveticaNeue-Bold;\f5\fnil\fcharset0 Menlo-Bold;
\f6\fnil\fcharset0 Menlo-Regular;\f7\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red255\green255\blue255;\red55\green146\blue55;
\red67\green91\blue103;\red29\green38\blue42;\red245\green247\blue249;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c26275\c62745\c27843;
\cssrgb\c32941\c43137\c47843;\cssrgb\c14902\c19608\c21961;\cssrgb\c96863\c97647\c98039;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 53.\'a0Maximum Subarray\cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\b0\fs26 \cf4 \cb3 \strokec4 Easy\cb1 \
\pard\pardeftab720\sl340\qc\partightenfactor0

\f1\fs24 \cf5 \strokec5 \
\cb3 10459\cb1 \
\
\cb3 504\cb1 \
\
\cb3 Add to List\cb1 \
\
\cb3 Share\cb1 \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf6 \cb3 \strokec6 Given an integer array\'a0
\f2\fs26 \cf5 \cb7 \strokec5 nums
\f1\fs28 \cf6 \cb3 \strokec6 , find the contiguous subarray (containing at least one number) which has the largest sum and return\'a0
\f3\i its sum
\f1\i0 .\cb1 \
\cb3 \'a0\cb1 \

\f4\b \cb3 Example 1:
\f1\b0 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f5\b\fs26 \cf6 \cb7 Input:
\f6\b0  nums = [-2,1,-3,4,-1,2,1,-5,4]\

\f5\b Output:
\f6\b0  6\

\f5\b Explanation:
\f6\b0  [4,-1,2,1] has the largest sum = 6.\
\pard\pardeftab720\sa280\partightenfactor0

\f4\b\fs28 \cf6 \cb3 Example 2:
\f1\b0 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f5\b\fs26 \cf6 \cb7 Input:
\f6\b0  nums = [1]\

\f5\b Output:
\f6\b0  1\
\pard\pardeftab720\sa280\partightenfactor0

\f4\b\fs28 \cf6 \cb3 Example 3:
\f1\b0 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f5\b\fs26 \cf6 \cb7 Input:
\f6\b0  nums = [0]\

\f5\b Output:
\f6\b0  0\
\pard\pardeftab720\sa280\partightenfactor0

\f4\b\fs28 \cf6 \cb3 Example 4:
\f1\b0 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f5\b\fs26 \cf6 \cb7 Input:
\f6\b0  nums = [-1]\

\f5\b Output:
\f6\b0  -1\
\pard\pardeftab720\sa280\partightenfactor0

\f4\b\fs28 \cf6 \cb3 Example 5:
\f1\b0 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f5\b\fs26 \cf6 \cb7 Input:
\f6\b0  nums = [-100000]\

\f5\b Output:
\f6\b0  -100000\
\pard\pardeftab720\sa280\partightenfactor0

\f1\fs28 \cf6 \cb3 \'a0\cb1 \

\f4\b \cb3 Constraints:
\f1\b0 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs26 \cf5 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 1 <= nums.length <= 3 * 10
\fs19\fsmilli9750 4
\f1\fs28 \cf6 \cb1 \strokec6 \
\ls1\ilvl0
\f2\fs26 \cf5 \cb7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 -10
\fs19\fsmilli9750 5
\fs26 \'a0<= nums[i] <= 10
\fs19\fsmilli9750 5
\f1\fs28 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sa280\partightenfactor0
\cf6 \cb3 \'a0\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\b \cf6 \cb3 Follow up:
\f1\b0 \'a0If you have figured out the\'a0
\f2\fs26 \cf5 \cb7 \strokec5 O(n)
\f1\fs28 \cf6 \cb3 \strokec6 \'a0solution, try coding another solution using the\'a0
\f4\b divide and conquer
\f1\b0 \'a0approach, which is more subtle.\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f7\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
/**\
 * @param \{number[]\} nums\
 * @return \{number\}\
 */\
var maxSubArray = function(nums) \
\{\
    if(nums.length === 1)\
    \{return nums[0];\}\
    \
    let values = [];\
    \
    for(let i = nums.length - 1; i >= 0; i--)\
    \{\
        if(values[0] && values[0] > 0)\
        \{\
            values.unshift(nums[i] + values[0]);\
        \} else\
        \{\
            values.unshift(nums[i]);\
        \}\
    \}\
    let max_of_max_values = Number.NEGATIVE_INFINITY;\
    for(let i = 0; i < values.length; i++)\
    \{\
        if(max_of_max_values < values[i])\{max_of_max_values = values[i];\}\
    \}\
    return max_of_max_values;\
\};\
\
}