{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red29\green38\blue42;\red255\green255\blue255;\red245\green247\blue249;
\red67\green91\blue103;}
{\*\expandedcolortbl;;\cssrgb\c14902\c19608\c21961;\cssrgb\c100000\c100000\c100000;\cssrgb\c96863\c97647\c98039;
\cssrgb\c32941\c43137\c47843;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Merge two sorted linked lists and return it as a\'a0
\f1\b sorted
\f0\b0 \'a0list. The list should be made by splicing together the nodes of the first two lists.\
\'a0\

\f1\b Example 1:
\f0\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\b\fs26 \cf2 \cb4 Input:
\f3\b0  l1 = [1,2,4], l2 = [1,3,4]\

\f2\b Output:
\f3\b0  [1,1,2,3,4,4]\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf2 \cb3 Example 2:
\f0\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\b\fs26 \cf2 \cb4 Input:
\f3\b0  l1 = [], l2 = []\

\f2\b Output:
\f3\b0  []\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf2 \cb3 Example 3:
\f0\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\b\fs26 \cf2 \cb4 Input:
\f3\b0  l1 = [], l2 = [0]\

\f2\b Output:
\f3\b0  [0]\
\pard\pardeftab720\sa280\partightenfactor0

\f0\fs28 \cf2 \cb3 \'a0\

\f1\b Constraints:
\f0\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The number of nodes in both lists is in the range\'a0
\f4\fs26 \cf5 \cb4 [0, 50]
\f0\fs28 \cf2 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f4\fs26 \cf5 \cb4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
-100 <= Node.val <= 100
\f0\fs28 \cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Both\'a0
\f4\fs26 \cf5 \cb4 l1
\f0\fs28 \cf2 \cb3 \'a0and\'a0
\f4\fs26 \cf5 \cb4 l2
\f0\fs28 \cf2 \cb3 \'a0are sorted in\'a0
\f1\b non-decreasing
\f0\b0 \'a0order.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb1 \
\
\
/**\
 * Definition for singly-linked list.\
 * function ListNode(val, next) \{\
 *     this.val = (val===undefined ? 0 : val)\
 *     this.next = (next===undefined ? null : next)\
 * \}\
 */\
/**\
 * @param \{ListNode\} l1\
 * @param \{ListNode\} l2\
 * @return \{ListNode\}\
 */\
\
\
var mergeTwoLists = function(l1, l2) \{\
    let return_list_node = l1;\
    if(!l1 || l2 && l1.val > l2.val)\{return_list_node = l2; \
                                     if(l2)\{l2 = l2.next;\}\}\
    else if(l1)\{l1 = l1.next\}\
    let traversal_node = return_list_node;\
    while(l1 || l2)\
    \{\
        if(l1 && l2)\
        \{\
            if(l1.val > l2.val)\
            \{\
                traversal_node.next = l2;\
                traversal_node = traversal_node.next;\
                l2 = l2.next;\
            \} else \{\
                traversal_node.next = l1;\
                traversal_node = traversal_node.next;\
                l1 = l1.next;                \
            \}\
        \} else\
        \{\
            if(l1)\
            \{\
                traversal_node.next = l1;\
                traversal_node = traversal_node.next;\
                l1 = l1.next;                \
            \} else \{\
                traversal_node.next = l2;\
                traversal_node = traversal_node.next;\
                l2 = l2.next;\
            \}\
        \}\
    \}\
    \
    return return_list_node;\
\};\
}